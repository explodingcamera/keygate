datasource db {
  provider = "sqlite"
  url      = "file:./db/dev.db"
}

generator client {
  provider = "cargo prisma"
  output   = "./crates/core/prisma/prisma.rs"
}

model Identity {
  id         String   @id
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastActive DateTime

  username       String?        @unique
  primaryEmail   String?        @unique
  passwordHash   String?
  LoginProcesses LoginProcess[] // one-to-many relation
  Sessions       Session[] // one-to-many relation
  AuditLog       AuditLog[]
  APIKey         APIKey[]
}

model Email {
  email      String    @id @unique
  verified   Boolean
  verifiedAt DateTime?
}

model LinkedAccount {
  id         String @id
  providerId String
}

model LoginProcess {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  identityId  String
  ipAddress   String?
  expiresAt   DateTime
  completed   Boolean  @default(false)
  currentStep String
  magicLink   String?
  Identity    Identity @relation(fields: [identityId], references: [id])
}

model PublicKey {
  id        String   @id
  createdAt DateTime @default(now())

  // currently only supports ed25519
  type String

  // the node that holds the private key
  nodeId String

  // things that are signed with this key can't be verified after this date
  validUntil DateTime

  // currently unused
  revokedAt DateTime?
}

model Meta {
  key       String   @id @unique
  updatedAt DateTime @updatedAt

  value     String
  valueDate DateTime?
  valueInt  Int?
  valueBool Boolean?
  valueByte Bytes?
}

model AuditLog {
  id        String   @id
  createdAt DateTime @default(now())

  identityId String
  Identity   Identity @relation(fields: [identityId], references: [id])

  sessionId String?
  Session   Session? @relation(fields: [sessionId], references: [id])

  // the node that performed the action
  nodeId String

  // the action that was performed
  action String

  // the target of the action
  targetId String?

  // the type of the target
  targetType String?

  // the data that was changed
  data String?
}

model Session {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  revokedAt DateTime?

  firstipAddress String // the ip address of the first request
  nodeId         String // the node that issued the session

  // the full refresh token (including the signature) is stored here
  // if an invalid refresh token, which is associated with this session, is used, the session is revoked (e.g. if the refresh token is leaked)
  refreshToken String

  identityId String
  Identity   Identity   @relation(fields: [identityId], references: [id])
  AuditLog   AuditLog[]
}

model APIKey {
  key String @id

  identityId String?
  Identity   Identity? @relation(fields: [identityId], references: [id])

  // user definable
  name String

  target   String // what API this key is used for (e.g Auth API)
  audience String // where this key is used (e.g. a specific website or app)

  // is this key supposed to be accesable from e.g a public website
  public Boolean

  // what hostnames can use this key (for public api keys)
  hostnames String // comma seperated list
}
