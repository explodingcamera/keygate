syntax = "proto3";
package v1.api.auth;

import "models/models.proto";

service AuthService {
  rpc Login(InitLoginRequest) returns (LoginResponse);
  rpc LoginStep(LoginStepRequest) returns (LoginResponse);
  rpc LoginStatus(LoginStatusRequest) returns (LoginStatusResponse);

  rpc AccountExists(AccountExistsRequest) returns (AccountExistsResponse);
  rpc Signup(SignupRequest) returns (SignupResponse);
}

message SignupRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  string device_id = 4;
  bytes ip_address = 5;
}

message SignupResponse {
  oneof response {
    // if the user is logged in automatically after signup
    SignupSuccessResponse success = 1;

    // if the user is required to verify their email before logging in
    bool requires_email_verification = 2;
  }
}

message SignupSuccessResponse { string refresh_token = 1; }
message LoginStatusRequest { string process_id = 1; }

message InitLoginRequest {
  string device_id = 2;
  bytes ip_address = 3;

  // the first step of the process can be provided here if it is known (e.g.
  // username/email) to avoid an extra round trip
  optional LoginStepRequest step = 4;
}

message LoginStepRequest {
  Step step_type = 1;
  string process_id = 2;
  string data = 3;

  enum Step {
    INIT = 0;
    USERNAME = 1;
    EMAIL = 2;
    PASSWORD = 3;
    MAGIC_LINK = 4;
    MFA_EMAIL = 5;
    MFA_TOTP = 7;
    MFA_U2F = 8;
    MFA_RECOVERY = 9;

    // email verification might be required for login
    VERIFY_EMAIL = 10;
  }
}

message LoginResponse {
  oneof response {
    LoginSuccessResponse success = 1;
    LoginNextStepResponse next_step = 2;
  }
}

message LoginSuccessResponse { string refresh_token = 1; }

message LoginStatusResponse {
  LoginStepRequest.Step current_step = 1;

  // the user might have multiple ways to authenticate
  repeated LoginStepRequest.Step next_steps = 2;
}

message LoginNextStepResponse {
  // the user might have multiple ways to authenticate
  repeated LoginStepRequest.Step step_type = 1;
}

message AccountExistsRequest {
  oneof request {
    string username = 1;
    string email = 2;
  }
}
message AccountExistsResponse { bool exists = 1; }
